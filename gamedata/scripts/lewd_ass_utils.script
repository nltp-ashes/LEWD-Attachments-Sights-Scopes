---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 29/01/2024                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to define utility functions that are used at numerous points in the addon's codebase.             ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

debug_mode                   = true

-- ---------------------------------------------------------------------------------------------------------------------
-- LEWD ASS specific utility functions
-- ---------------------------------------------------------------------------------------------------------------------

function uses_lewd_ass(obj)
    if not validate_params({obj,"uses_lewd_ass"}) then return end
    return IsWeapon(obj) and ini_sys:r_bool_ex(obj:section(), "lewd_ass_enabled", false)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Scope functions
-- ---------------------------------------------------------------------------------------------------------------------

function get_scopes(section)
    if not validate_params({section,"get_lewd_ass_scopes"}) then return end
    return parse_list(ini_sys, section, "lewd_ass_scopes")
end

function has_scope(scopes, scope)
    return this.table_contains(scopes, scope)
end

function set_all_scopes_visibility(weapon, scope_sections, visibility)
    for _,section in pairs(scope_sections) do
        this.set_scope_visibility(weapon, section, visibility)
    end
end

function set_scope_visibility(weapon, scope_section, visibility)
    local bone_name = "ass_scope_" .. scope_section
    dbg_printf("bone_name %s %s", bone_name, visibility)
    this.bone_hud_visibility(weapon, bone_name, "wpn_body", visibility)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Debug function
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to print information into the console/log file only when Western Goods' debug mode is enabled.
--- @return nil
function dbg_printf(...)
    if debug_mode then
        printf(...)
    end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Table functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to know if a certain value is contained in a table. This function is generic enough so that it'd work on any table.
--- @param tab table
--- @param val any
--- @return boolean
function table_contains(tab, val)
    if not validate_params({tab,val,"table_contains"}) then return end
    for _,value in pairs(tab) do
        if val == value then
            return true
        end
    end
    return false
end

--- Function used to get a random id (as an int) from a given table.
--- Returns a random number between 1 and the size of the table.
--- @param tab table
--- @return number
function table_random_id(tab)
    if not validate_params({tab,"table_random_id"}) then return end
    return math.random(1,#tab)
end

--- Function used to get a random key from a key-value table.
--- @param tab table
--- @return any
function table_random_key(tab)
    if not validate_params({tab,"table_random_key"}) then return end
    local n = {}
    for k,v in pairs(tab) do
        n[#n+1] = k
    end
    return #n > 0 and n[math.random(#n)] or nil
end

--- Function used to know if an element of a table has a next.
--- @param tab table
--- @param pos number
--- @return boolean
function has_next(tab, pos)
    if not validate_params({tab,pos,"has_next"}) then return end
    return next(tab,pos) ~= nil
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Bone functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the position of a bone by its name.
--- This function should be used in case the bone is from a world model.
--- @author Thial
--- @param obj game_object
--- @param bone string
--- @return vector
function bone_position(obj, bone)
    if not validate_params({obj,bone,"bone_position"}) then return end

    return obj:bone_position(obj:get_bone_id(bone, false), false)
end

--- Function used to get the position of a bone by its name.
--- This function should be used in case the bone is from a hud model.
--- @param obj game_object
--- @param hud_bone string
--- @param bone string
--- @return vector
function bone_hud_position(obj, hud_bone, bone)
    if not validate_params({obj,hud_bone,bone,"bone_hud_position"}) then return end

    -- Cant find hud bone in TPS, use default bone
    if level.get_active_cam() ~= 0 then
        printf("~[LEWD ASS] WARNING | Utils | Trying to get HUD bone '%s' position in third person ! Fallback to '%s'", hud_bone, bone)
        return this.bone_position(obj, bone)
    end

    return obj:bone_position(obj:get_bone_id(hud_bone, true), true)
end

--- Function used to set the visibility a bone off a game object.
--- This function can be used as a getter or as a setter.
--- This function should be used in case the bone is from a world model.
--- @param obj game_object
--- @param bone string
--- @param visibility boolean
--- @return nil
function bone_visibility(obj, bone, visibility)
    if not validate_params({obj,bone,"bone_visibility"}) then return end

    if visibility == nil then
        return obj:bone_visible(bone, false)
    end

    obj:set_bone_visible(bone, visibility, true, false)
end

--- Function used to set the visibility a bone off a game object.
--- This function can be used as a getter or as a setter.
--- This function should be used in case the bone is from a hud model.
--- @param obj game_object
--- @param hud_bone string
--- @param bone string
--- @param visibility boolean
--- @return nil
function bone_hud_visibility(obj, hud_bone, bone, visibility)
    if not validate_params({obj,hud_bone,bone,"bone_hud_visibility"}) then return end

    -- Cant find hud bone in TPS, use default bone
    if level.get_active_cam() ~= 0 then
        printf("~[LEWD ASS] WARNING | Utils | Trying to set HUD bone '%s' visibility in third person ! Fallback to '%s'", hud_bone, bone)
        return this.bone_visibility(obj, bone, visibility)
    end

    if visibility == nil then
        return obj:bone_visible(hud_bone, true)
    end

    obj:set_bone_visible(hud_bone, visibility, true, true)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Validation functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to check if all necessary parameters were correctly passed to a function.
--- Last element of the table has to be the name of the function calling validate_params.
--- Use like this : 'if not validate_params({param_1,param_1,"my_function"}) then return end'
--- @param params table
--- @return boolean
function validate_params(params)
    local index = 1
    for i,_ in pairs(params) do
        if i ~= index then
            printf("![LEWD ASS] ERROR | Utils | Missing argument no %s for '%s()'!",index,params[#params])
            return false
        end
        index = index + 1
    end
    return true
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Other Utils Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to find an NPC by its section name in the player squad.
--- @author mr_demonized
--- @param func function
--- @param ... table
--- @return nil
function next_tick(func, ...)
    if not validate_params({func,"next_tick"}) then return end

    local args = {...}
    AddUniqueCall(function()
        func(unpack(args))
        return true
    end)
end